"""add table of contents table

Revision ID: d443aa0e27da
Revises: 
Create Date: 2025-01-17 23:11:39.718279

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = 'd443aa0e27da'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Create enums if they don't exist
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    existing_enums = inspector.get_enums()
    
    enum_names = ['bookprogressstatus', 'sessionstatus', 'intervaltype', 'intervalstatus']
    enum_values = {
        'bookprogressstatus': ['IN_PROGRESS', 'COMPLETED'],
        'sessionstatus': ['IN_PROGRESS', 'COMPLETED'],
        'intervaltype': ['WORK', 'SHORT_BREAK', 'LONG_BREAK'],
        'intervalstatus': ['ACTIVE', 'PAUSED', 'COMPLETED']
    }
    
    for enum_name, values in enum_values.items():
        if not any(enum['name'] == enum_name for enum in existing_enums):
            enum_type = postgresql.ENUM(*values, name=enum_name)
            enum_type.create(op.get_bind())

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('table_of_contents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('book_id', sa.String(), nullable=False),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_table_of_contents_book_id'), 'table_of_contents', ['book_id'], unique=False)
    op.create_index(op.f('ix_table_of_contents_id'), 'table_of_contents', ['id'], unique=False)
    
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    
    # Use existing enum type for book_progress
    book_progress_status = postgresql.ENUM('IN_PROGRESS', 'COMPLETED', name='bookprogressstatus', create_type=False)
    op.create_table('book_progress',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('book_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('author', sa.String(), nullable=True),
    sa.Column('cover_image', sa.String(), nullable=True),
    sa.Column('current_chapter', sa.Integer(), nullable=True),
    sa.Column('total_chapters', sa.Integer(), nullable=False),
    sa.Column('status', book_progress_status, nullable=True),
    sa.Column('progress_percentage', sa.Float(), nullable=True),
    sa.Column('book_metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_book_progress_book_id'), 'book_progress', ['book_id'], unique=False)
    op.create_index(op.f('ix_book_progress_id'), 'book_progress', ['id'], unique=False)
    
    # Use existing enum type for reading_sessions
    session_status = postgresql.ENUM('IN_PROGRESS', 'COMPLETED', name='sessionstatus', create_type=False)
    op.create_table('reading_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('book_id', sa.String(), nullable=False),
    sa.Column('chapter_number', sa.Integer(), nullable=True),
    sa.Column('chapter_title', sa.String(), nullable=True),
    sa.Column('chapter_type', sa.String(), nullable=True),
    sa.Column('status', session_status, nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('intervals_count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reading_sessions_id'), 'reading_sessions', ['id'], unique=False)
    
    # Use existing enum types for intervals
    interval_type = postgresql.ENUM('WORK', 'SHORT_BREAK', 'LONG_BREAK', name='intervaltype', create_type=False)
    interval_status = postgresql.ENUM('ACTIVE', 'PAUSED', 'COMPLETED', name='intervalstatus', create_type=False)
    op.create_table('intervals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=True),
    sa.Column('type', interval_type, nullable=True),
    sa.Column('status', interval_status, nullable=True),
    sa.Column('remaining_time', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['reading_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_intervals_id'), 'intervals', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # Drop tables first
    op.drop_index(op.f('ix_intervals_id'), table_name='intervals')
    op.drop_table('intervals')
    op.drop_index(op.f('ix_reading_sessions_id'), table_name='reading_sessions')
    op.drop_table('reading_sessions')
    op.drop_index(op.f('ix_book_progress_id'), table_name='book_progress')
    op.drop_index(op.f('ix_book_progress_book_id'), table_name='book_progress')
    op.drop_table('book_progress')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_table_of_contents_id'), table_name='table_of_contents')
    op.drop_index(op.f('ix_table_of_contents_book_id'), table_name='table_of_contents')
    op.drop_table('table_of_contents')
    
    # Drop enum types if they exist
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    existing_enums = inspector.get_enums()
    
    enum_names = ['bookprogressstatus', 'sessionstatus', 'intervaltype', 'intervalstatus']
    for enum_name in enum_names:
        if any(enum['name'] == enum_name for enum in existing_enums):
            op.execute(f'DROP TYPE {enum_name}')
    # ### end Alembic commands ###
